@page "/register"
@using SInformation.shared.Models
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>Register</h3>

<div class="container">
    <EditForm Model="@user">
        <DataAnnotationsValidator>

        </DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label>Username</label>
            <InputText class="form-control" @bind-Value="@user.Username"></InputText>
        </div>
        <div class="form-group">
            <label>Email</label>
            <InputText type="form-control" class="form-control" @bind-Value="@user.Email"></InputText>
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText type="password" class="form-control" @bind-Value="@user.Password"></InputText>
        </div>
        <div class="form-group">
            <button class="btn btn-primary" @onclick="@clear">Clear</button>
            <button class="btn btn-success" @onclick="@register">Register</button>
        </div>
        <hr />
        <div class="container">
            <strong>@responseData.Message</strong>
        </div>
    </EditForm>
</div>
@code { private RegisterModel user;
            private Response responseData;

            protected override Task OnInitializedAsync()
            {
                user = new RegisterModel();
                responseData = new Response();
                return base.OnInitializedAsync();
            }
            void clear()
            {
                user = new RegisterModel();
            }
            async Task register()
            {
                var response = await httpClient.PostAsJsonAsync("http://localhost:17870/api/Authenticate/register", user);
                var message = await response.Content.ReadAsStringAsync();
                responseData = JsonSerializer.Deserialize<Response>(message);
                navigationManager.NavigateTo("/login");
            }
}