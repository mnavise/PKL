@page "/login"
@using SInformation.shared.Models
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h3>Login</h3>

<div class="container">
    <EditForm Model="@user">
        <DataAnnotationsValidator>

        </DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label>User Name</label>
            <InputText class="form-control" @bind-Value="@user.Username"></InputText>
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText type="password" class="form-control" @bind-Value="@user.Password"></InputText>
        </div>

        <div class="form-group">
            <button class="btn btn-primary" @onclick="@clear">Clear</button>
            <button class="btn btn-success" @onclick="@login">Login</button>
        </div>
        <hr />
        <div class="container">
            <strong>@responseData.Message</strong>
        </div>
    </EditForm>
</div>

@code {
    private LoginModel user;
    private Response responseData;

    protected override Task OnInitializedAsync()
    {
        user = new LoginModel();
        responseData = new Response();
        return base.OnInitializedAsync();
    }
    void clear()
    {
        user = new LoginModel();
    }

    async Task login()
    {
        var response = await httpClient.PostAsJsonAsync("http://localhost:17870/api/Authenticate/login", user);
        var message = await response.Content.ReadAsStringAsync();
        responseData = JsonSerializer.Deserialize<Response>(message);
        //save data in sesion storage
        await sessionStorage.SetItemAsStringAsync("token", responseData.Message);
        navigationManager.NavigateTo("/fetchdata");
    }
}
